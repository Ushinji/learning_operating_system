     1                                  ; **********************************************
     2                                  ; put_c
     3                                  ; put_c関数を呼び出して、文字出力を行う
     4                                  ; **********************************************
     5                                  
     6                                          BOOT_LOAD       equ     0x7C00
     7                                          ORG     BOOT_LOAD
     8                                  
     9                                  ; マクロ読み込み
    10                                  %include "../include/macro.s"
     1                              <1> ; %macro <マクロ名> <引数の数>
     2                              <1> ; 1-*: 1つ以上の引数が指定されることを示す
     3                              <1> ; .nolist: マクロのリスト出力を抑止
     4                              <1> %macro  cdecl 1-*.nolist
     5                              <1> 
     6                              <1>     ; -------------------------------------------------
     7                              <1>     ; 引数リストから、呼び出し関数の引数を末尾から順にpushする
     8                              <1>     ; -------------------------------------------------
     9                              <1>     ; %rep <number>: %rep -> %endrepの間を指定回数分ループする
    10                              <1>     ; %0 - 1: 呼び出し関数への引数の数(%0は引数の数を表す。引数の数から、呼び出し関数そのものを数から引くと呼び出し関数への引数の数となる)
    11                              <1>     %rep    %0 - 1
    12                              <1>         ; 引数リストの末尾の値をpushする
    13                              <1>         ; %{-1:-1}: 引数リストの末尾を表す
    14                              <1>         push    %{-1:-1}
    15                              <1> 
    16                              <1>         ; %rotate: 引数リストを指定した数だけずらす
    17                              <1>         ; 今回は末尾から引数をpushしたいので、負の数を指定し右方向へ動かす
    18                              <1>         ; ※動作例
    19                              <1>         ; [1, 2, 3, 4] -> (%rotate -1) -> [4, 1, 2, 3]
    20                              <1>         %rotate -1
    21                              <1>     %endrep
    22                              <1> 
    23                              <1>     ; 引数リストの順番を元に戻す
    24                              <1>     %rotate - 1
    25                              <1> 
    26                              <1>     ; 関数呼び出し
    27                              <1>     call    %1
    28                              <1>     
    29                              <1>     ; 引数が与えられている場合
    30                              <1>     %if 1 < %0
    31                              <1>         ; 呼び出し関数への引数分だけスタックの破棄(スタックポインタ(SP)の調整)
    32                              <1>         ; __BITS__: ビットモード判定(実行環境に応じた値(16 or 32 or 64)が得られる)
    33                              <1>         ; ビットモードを3ビット分右にシフト(1/8)すると、バイトサイズが得られる
    34                              <1>         ; * 16ビットモード: 2バイト
    35                              <1>         ; * 32ビットモード: 4バイト
    36                              <1>         ; * 64ビットモード: 8バイト
    37                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    38                              <1>     %endif
    39                              <1> 
    40                              <1> %endmacro
    11                                  
    12                                  entry:
    13 00000000 EB58                            jmp     ipl
    14 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    15                                  ipl:
    16 0000005A FA                              cli
    17 0000005B B80000                          mov     ax, 0x0000      ; Accumulate(蓄積) Register = 0x0000
    18 0000005E 8ED8                            mov     ds, ax          ; Data Segment  = 0x0000
    19 00000060 8EC0                            mov     es, ax          ; Extra Segment = 0x0000
    20 00000062 8ED0                            mov     ss, ax          ; Stack Segment = 0x0000
    21 00000064 BC007C                          mov     sp, BOOT_LOAD   ; Stack Point   = 0x7C00
    22                                  
    23 00000067 FB                              sti
    24                                  
    25 00000068 8816[8600]                      mov     [BOOT.DRIVE], dl
    26                                  
    27 0000006C 6A58E8170083C402                cdecl   putc, word 'X'
    28 00000074 6A59E80F0083C402                cdecl   putc, word 'Y'
    29 0000007C 6A5AE8070083C402                cdecl   putc, word 'Z'
    30                                  
    31 00000084 EBFE                            jmp     $
    32                                  
    33                                  ; ALIGNディレクティブ。データを2バイト境界で配置するように指示
    34                                  ALIGN 2, db 0
    35                                  
    36                                  ; ブートドライブに関する情報
    37                                  BOOT:
    38 00000086 0000                    .DRIVE:         dw 0    ; ドライブ番号
    39                                  
    40                                  ; モジュール読み込み
    41                                  %include        "../modules/real/putc.s"
     1                              <1> ; ******************************
     2                              <1> ; void putc(ch);
     3                              <1> ; -----------------
     4                              <1> ; ch: 文字コード
     5                              <1> ; -----------------
     6                              <1> ; ******************************
     7                              <1> 
     8                              <1> ; // ****************
     9                              <1> ; // レジスタ位置関係
    10                              <1> ; // ****************
    11                              <1> ;   + 4 | ch
    12                              <1> ;   + 2 | 戻り番地
    13                              <1> ; BP+ 0 | BP
    14                              <1> 
    15                              <1> putc:
    16                              <1>     ; スタックフレームの構築
    17 00000088 55                  <1>     push    bp
    18 00000089 89E5                <1>     mov     bp, sp
    19                              <1> 
    20                              <1>     ; レジスタの保存
    21 0000008B 50                  <1>     push    ax              ;AX: Accumulate Register
    22 0000008C 53                  <1>     push    bx              ;BX: Base Register
    23                              <1> 
    24 0000008D 8A4604              <1>     mov     al, [bp + 4]    ; AL(AXの下位(Low)8bit)に引数のchを代入
    25 00000090 B40E                <1>     mov     ah, 0x0E        ; AH(AXの上位(Hight)8bit)に、テレタイプ式1文字出力を設定
    26 00000092 BB0000              <1>     mov     bx, 0x0000      ; ページ番号と文字色を0に設定
    27 00000095 CD10                <1>     int     0x10            ; ビデオBIOSコール(INT10)
    28                              <1> 
    29                              <1>     ; レジスタの復帰
    30 00000097 5B                  <1>     pop bx
    31 00000098 58                  <1>     pop ax
    32                              <1> 
    33                              <1>     ; スタックフレームの破棄
    34 00000099 89EC                <1>     mov sp, bp
    35 0000009B 5D                  <1>     pop bp
    36                              <1> 
    37                              <1>     ; 呼び出し元へ戻る
    38 0000009C C3                  <1>     ret
    42                                  
    43 0000009D 00<rept>                        times 510 - ($ - $$) db 0x00
    44 000001FE 55AA                            db 0x55, 0xAA

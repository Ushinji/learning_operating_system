     1                                  ; **********************************************
     2                                  ; stage_2
     3                                  ; **********************************************
     4                                  
     5                                          BOOT_LOAD       equ     0x7C00
     6                                          ORG     BOOT_LOAD
     7                                  
     8                                  %include "../include/macro.s"
     1                              <1> ; %macro <マクロ名> <引数の数>
     2                              <1> ; 1-*: 1つ以上の引数が指定されることを示す
     3                              <1> ; .nolist: マクロのリスト出力を抑止
     4                              <1> %macro  cdecl 1-*.nolist
     5                              <1> 
     6                              <1>     ; -------------------------------------------------
     7                              <1>     ; 引数リストから、呼び出し関数の引数を末尾から順にpushする
     8                              <1>     ; -------------------------------------------------
     9                              <1>     ; %rep <number>: %rep -> %endrepの間を指定回数分ループする
    10                              <1>     ; %0 - 1: 呼び出し関数への引数の数(%0は引数の数を表す。引数の数から、呼び出し関数そのものを数から引くと呼び出し関数への引数の数となる)
    11                              <1>     %rep    %0 - 1
    12                              <1>         ; 引数リストの末尾の値をpushする
    13                              <1>         ; %{-1:-1}: 引数リストの末尾を表す
    14                              <1>         push    %{-1:-1}
    15                              <1> 
    16                              <1>         ; %rotate: 引数リストを指定した数だけずらす
    17                              <1>         ; 今回は末尾から引数をpushしたいので、負の数を指定し右方向へ動かす
    18                              <1>         ; ※動作例
    19                              <1>         ; [1, 2, 3, 4] -> (%rotate -1) -> [4, 1, 2, 3]
    20                              <1>         %rotate -1
    21                              <1>     %endrep
    22                              <1> 
    23                              <1>     ; 引数リストの順番を元に戻す
    24                              <1>     %rotate - 1
    25                              <1> 
    26                              <1>     ; 関数呼び出し
    27                              <1>     call    %1
    28                              <1>     
    29                              <1>     ; 引数が与えられている場合
    30                              <1>     %if 1 < %0
    31                              <1>         ; 呼び出し関数への引数分だけスタックの破棄(スタックポインタ(SP)の調整)
    32                              <1>         ; __BITS__: ビットモード判定(実行環境に応じた値(16 or 32 or 64)が得られる)
    33                              <1>         ; ビットモードを3ビット分右にシフト(1/8)すると、バイトサイズが得られる
    34                              <1>         ; * 16ビットモード: 2バイト
    35                              <1>         ; * 32ビットモード: 4バイト
    36                              <1>         ; * 64ビットモード: 8バイト
    37                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    38                              <1>     %endif
    39                              <1> 
    40                              <1> %endmacro
     9                                  
    10                                  entry:
    11 00000000 EB58                            jmp     ipl
    12 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    13                                  ipl:
    14 0000005A FA                              cli                             ; BIOSからの割り込みを禁止
    15 0000005B B80000                          mov     ax, 0x0000              ; Accumulate(蓄積) Register = 0x0000
    16 0000005E 8ED8                            mov     ds, ax                  ; Data Segment  = 0x0000
    17 00000060 8EC0                            mov     es, ax                  ; Extra Segment = 0x0000
    18 00000062 8ED0                            mov     ss, ax                  ; Stack Segment = 0x0000
    19 00000064 BC007C                          mov     sp, BOOT_LOAD           ; Stack Point   = 0x7C00
    20                                  
    21 00000067 FB                              sti                             ; BIOSからの割り込みを許可
    22                                  
    23 00000068 8816[C600]                      mov     [BOOT.DRIVE], dl        ; ブートドライブを保存
    24                                  
    25 0000006C 68[9800]E8560083C4-             cdecl   puts, .s0
    25 00000074 02                 
    26                                  
    27 00000075 B402                            mov     ah, 0x02                ; AH: 読み込み命令
    28 00000077 B001                            mov     al, 1                   ; AL: 読み込みセクタ数
    29 00000079 B90200                          mov     cx, 0x0002              ; CX: シリンダ/セクタ
    30 0000007C B600                            mov     dh, 0x00                ; DH: ヘッド位置
    31 0000007E 8A16[C600]                      mov     dl, [BOOT.DRIVE]        ; DL: ドライブ番号
    32 00000082 BB007E                          mov     bx, 0x7C00 + 512        ; BX: オフセット
    33 00000085 CD13                            int     0x13                    ; BIOS(0x13, 0x02): セクタ読み出し
    34 00000087 730C                    .10Q:   jnc     .10E                    
    35 00000089 68[B100]E8390083C4-     .10T:   cdecl   puts, .e0               ; セクタ読み込みに失敗した場合は、再起動
    35 00000091 02                 
    36 00000092 E85200                          call    reboot
    37                                  .10E:
    38                                  
    39                                          ; 次ステージへ移行
    40 00000095 E96801                          jmp     stage_2
    41                                  
    42                                  ; データ定義
    43                                  ; 0x0A(LF.カーソル位置を一行下げる), 0x0D(CR.カーソル位置を左端に移動する)
    44 00000098 426F6F74696E672E2E-     .s0     db      "Booting....", 0x0A, 0x0D, 0
    44 000000A1 2E2E0A0D00         
    45 000000A6 2D2D2D2D2D2D2D2D0A-     .s1     db      "--------", 0x0A, 0x0D, 0
    45 000000AF 0D00               
    46 000000B1 4572726F723A736563-     .e0     db      "Error:sector read", 0x0A, 0x0D, 0
    46 000000BA 746F7220726561640A-
    46 000000C3 0D00               
    47                                  
    48                                  ; ALIGNディレクティブ。データを2バイト境界で配置するように指示
    49 000000C5 00                      ALIGN 2, db 0
    50                                  
    51                                  ; ブートドライブに関する情報
    52                                  BOOT:
    53 000000C6 0000                    .DRIVE:         dw 0    ; ドライブ番号
    54                                  
    55                                  ; モジュール読み込み
    56                                  %include        "../modules/real/puts.s"
     1                              <1> ; ******************************
     2                              <1> ; void puts(str);
     3                              <1> ; -----------------
     4                              <1> ; str: 文字列のアドレス
     5                              <1> ; -----------------
     6                              <1> ; ******************************
     7                              <1> 
     8                              <1> ; // ****************
     9                              <1> ; // レジスタ位置関係
    10                              <1> ; // ****************
    11                              <1> ;   + 4 | str
    12                              <1> ;   + 2 | 戻り番地
    13                              <1> ; BP+ 0 | BP
    14                              <1> 
    15                              <1> puts:
    16                              <1>     ; スタックフレームの構築
    17 000000C8 55                  <1>     push    bp
    18 000000C9 89E5                <1>     mov     bp, sp
    19                              <1> 
    20                              <1>     ; レジスタの保存
    21 000000CB 50                  <1>     push    ax              ;AX: Accumulate Register
    22 000000CC 53                  <1>     push    bx              ;BX: Base Register
    23 000000CD 56                  <1>     push    si              ;SI: Source Register。ストリーム操作コマンド（たとえば MOV命令）でのソース（入力元）へのポインタとして使用
    24                              <1> 
    25                              <1>     ; 引数取得
    26 000000CE 8B7604              <1>     mov     si, [bp + 4]
    27                              <1> 
    28                              <1>     ; 処理開始
    29 000000D1 B40E                <1>     mov     ah, 0x0E        ; AH(AXの上位(Hight)8bit)に、テレタイプ式1文字出力を設定
    30 000000D3 BB0000              <1>     mov     bx, 0x0000      ; ページ番号と文字色を0に設定
    31 000000D6 FC                  <1>     cld                     ; Clear Direction Flag. DF=0で+方向に設定
    32                              <1> .10L:
    33                              <1>     ; LODSB命令: SIレジスタに指定されたアドレスから1バイト分のデータをALレジスタに読み込む。
    34                              <1>     ; そして、SIレジスタの値を1加算(or減算)を行う。今回はDF=0のため加算される)
    35 000000D7 AC                  <1>     lodsb
    36                              <1>     
    37                              <1>     ; ALレジスタを比較し0x00(終端文字)の場合は処理終了
    38                              <1>     ; 終端文字ではない場合は、該当文字の文字を出力し、処理を繰り返す
    39 000000D8 3C00                <1>     cmp     al, 0
    40 000000DA 7404                <1>     je      .10E
    41 000000DC CD10                <1>     int     0x10            ; ビデオBIOSコール(INT10)
    42 000000DE EBF7                <1>     jmp     .10L
    43                              <1> .10E:
    44                              <1> 
    45                              <1>     ; レジスタの復帰
    46 000000E0 5E                  <1>     pop si
    47 000000E1 5B                  <1>     pop bx
    48 000000E2 58                  <1>     pop ax
    49                              <1> 
    50                              <1>     ; スタックフレームの破棄
    51 000000E3 89EC                <1>     mov sp, bp
    52 000000E5 5D                  <1>     pop bp
    53                              <1> 
    54                              <1>     ; 呼び出し元へ戻る
    55 000000E6 C3                  <1>     ret
    57                                  %include        "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>     ; 再起動の説明を出力
     3 000000E7 68[0301]E8DBFF83C4- <1>     cdecl   puts, .s0
     3 000000EF 02                  <1>
     4                              <1> 
     5                              <1> .10L:
     6                              <1>     ; キー入力待ち
     7 000000F0 B410                <1>     mov     ah, 0x10
     8 000000F2 CD16                <1>     int     0x16
     9                              <1> 
    10                              <1>     ; キー入力が空白文字ではない場合、再度キー入力待ちへ戻る
    11 000000F4 3C20                <1>     cmp     al, ' '
    12 000000F6 75F8                <1>     jne     .10L
    13                              <1> 
    14                              <1>     ; 改行出力
    15 000000F8 68[2101]E8CAFF83C4- <1>     cdecl   puts, .s1
    15 00000100 02                  <1>
    16                              <1> 
    17                              <1>     ; 再起動
    18 00000101 CD19                <1>     int     0x19
    19                              <1> 
    20                              <1> 
    21                              <1>     ; 文字列データ
    22 00000103 0A0D50757368205350- <1> .s0     db 0x0A, 0x0D, "Push SPACE Key to reboot...", 0
    22 0000010C 414345204B65792074- <1>
    22 00000115 6F207265626F6F742E- <1>
    22 0000011E 2E2E00              <1>
    23 00000121 0A0D0A0D00          <1> .s1     db 0x0A, 0x0D, 0x0A, 0x0D, 0
    24                              <1> 
    58                                  
    59                                          ; プートフラグの定義
    60 00000126 00<rept>                        times 510 - ($ - $$) db 0x00
    61 000001FE 55AA                            db 0x55, 0xAA
    62                                  
    63                                  stage_2:
    64 00000200 68[0B02]E8C2FE83C4-             cdecl   puts, .s0
    64 00000208 02                 
    65 00000209 EBFE                            jmp     $
    66                                  
    67                                  ; データ定義
    68 0000020B 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
    68 00000214 2E2E2E0A0D00       
    69                                  
    70                                          ; ブートプログラムを8Kバイトとして定義
    71 0000021A 00<rept>                        times (1024 * 8) - ($ - $$) db 0        ; 8Kバイト

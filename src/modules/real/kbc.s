; --------------------------------------
; void KBC_data_write();
; KBCデータを書き込む
;
; @return       : 成功(0以外), 失敗(0)
; @param  data  : 書き込みデータ
; --------------------------------------

; ****************
; レジスタ位置関係
; ***************
;   + 4 | data
;   + 2 | 戻り番地
; BP+ 0 | BP
; -----------------

KBC_data_write:
    ; スタックフレームの構築
    push bp
    mov bp, sp

    ; レジスタの保存
    push cx

    ; KBCバッファへの書き込み開始
    mov cx, 0

.10L:
    ; KBCバッファへの書き込み可否を判定
    in al, 0x64     ; KBCステータスの取得
    test al, 0x02   ; AL & 0x02 // 書き込み可能であるかチェック
    loopnz  .10L    ; CXレジスタを減算し、0になったら次へ進む。そうではない場合は指定ラベルへ移動
                    ; ????
    cmp cx, 0       ; タイムアウト判定    
    jz  .20E

    mov al, [bp + 4]
    out 0x60, al    ; 指定データポート(0x60)に対して、データを出力する
.20E:
    mov ax, cx      ; return CX; CXレジスタが0以外の場合は書き込みされている

    ; レジスタの復帰
    pop cx

    ; スタックフレームの破棄
    mov sp, bp
    pop bp

    ret

; --------------------------------------
; void KBC_data_read();
; KBCデータを読み込む
;
; @return       : 成功(0以外), 失敗(0)
; @param  data  : 読み込みデータのアドレス
; --------------------------------------

; ****************
; レジスタ位置関係
; ***************
;   + 4 | data
;   + 2 | 戻り番地
; BP+ 0 | BP
; -----------------

KBC_data_read:
    ; スタックフレームの構築
    push bp
    mov bp, sp

    ; レジスタの保存
    push cx

    ; KBCバッファ読み込み開始
    mov cx, 0

.10L:
    ; KBCバッファへの読み込み可否を判定
    in al, 0x64         ; KBCステータスの取得
    test al, 0x01       ; AL & 0x01 // 読み込み可能であるかチェック
    loopnz  .10L        ; CXレジスタを減算し、0になったら次へ進む。そうではない場合は指定ラベルへ移動
                        ; ????
    cmp cx, 0           ; タイムアウト判定    
    jz  .20E
    
    ; データポート(0x60)に対して、データ取得を実行
    mov ah, 0x00
    in al, 0x60

    ; 取得データを読み込みデータバッファへ設定(data)
    mov di, [bp + 4]
    mov [di + 0], ax
.20E:
    mov ax, cx          ; return CX; CXレジスタが0以外の場合は書き込みされている

    ; レジスタの復帰
    pop cx

    ; スタックフレームの破棄
    mov sp, bp
    pop bp

    ret

; --------------------------------------
; void KBC_cmd_write(cmd);
; KBCコマンドを書き込む
;
; @return       : 成功(0以外), 失敗(0)
; @param  cmd   : 書き込みコマンド
; --------------------------------------

; ****************
; レジスタ位置関係
; ***************
;   + 4 | cmd
;   + 2 | 戻り番地
; BP+ 0 | BP
; -----------------

KBC_cmd_write:
    ; スタックフレームの構築
    push bp
    mov bp, sp

    ; レジスタの保存
    push cx

    ; KBCバッファへの書き込み開始
    mov cx, 0

.10L:
    ; KBCバッファへの書き込み可否を判定
    in al, 0x64     ; KBCステータスの取得
    test al, 0x02   ; AL & 0x02 // 書き込み可能であるかチェック
    loopnz  .10L    ; CXレジスタを減算し、0になったら次へ進む。そうではない場合は指定ラベルへ移動
                    ; ????
    cmp cx, 0       ; タイムアウト判定    
    jz  .20E

    ; コマンド/ステータス用のデータポート(0x64)に対して、コマンドを出力する
    mov al, [bp + 4]
    out 0x64, al
.20E:
    mov ax, cx      ; return CX; CXレジスタが0以外の場合は書き込みされている

    ; レジスタの復帰
    pop cx

    ; スタックフレームの破棄
    mov sp, bp
    pop bp

    ret

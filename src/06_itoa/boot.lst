     1                                  ; **********************************************
     2                                  ; put_c
     3                                  ; put_s関数を呼び出して、文字列出力を行う
     4                                  ; **********************************************
     5                                  
     6                                          BOOT_LOAD       equ     0x7C00
     7                                          ORG     BOOT_LOAD
     8                                  
     9                                  %include "../include/macro.s"
     1                              <1> ; %macro <マクロ名> <引数の数>
     2                              <1> ; 1-*: 1つ以上の引数が指定されることを示す
     3                              <1> ; .nolist: マクロのリスト出力を抑止
     4                              <1> %macro  cdecl 1-*.nolist
     5                              <1> 
     6                              <1>     ; -------------------------------------------------
     7                              <1>     ; 引数リストから、呼び出し関数の引数を末尾から順にpushする
     8                              <1>     ; -------------------------------------------------
     9                              <1>     ; %rep <number>: %rep -> %endrepの間を指定回数分ループする
    10                              <1>     ; %0 - 1: 呼び出し関数への引数の数(%0は引数の数を表す。引数の数から、呼び出し関数そのものを数から引くと呼び出し関数への引数の数となる)
    11                              <1>     %rep    %0 - 1
    12                              <1>         ; 引数リストの末尾の値をpushする
    13                              <1>         ; %{-1:-1}: 引数リストの末尾を表す
    14                              <1>         push    %{-1:-1}
    15                              <1> 
    16                              <1>         ; %rotate: 引数リストを指定した数だけずらす
    17                              <1>         ; 今回は末尾から引数をpushしたいので、負の数を指定し右方向へ動かす
    18                              <1>         ; ※動作例
    19                              <1>         ; [1, 2, 3, 4] -> (%rotate -1) -> [4, 1, 2, 3]
    20                              <1>         %rotate -1
    21                              <1>     %endrep
    22                              <1> 
    23                              <1>     ; 引数リストの順番を元に戻す
    24                              <1>     %rotate - 1
    25                              <1> 
    26                              <1>     ; 関数呼び出し
    27                              <1>     call    %1
    28                              <1>     
    29                              <1>     ; 引数が与えられている場合
    30                              <1>     %if 1 < %0
    31                              <1>         ; 呼び出し関数への引数分だけスタックの破棄(スタックポインタ(SP)の調整)
    32                              <1>         ; __BITS__: ビットモード判定(実行環境に応じた値(16 or 32 or 64)が得られる)
    33                              <1>         ; ビットモードを3ビット分右にシフト(1/8)すると、バイトサイズが得られる
    34                              <1>         ; * 16ビットモード: 2バイト
    35                              <1>         ; * 32ビットモード: 4バイト
    36                              <1>         ; * 64ビットモード: 8バイト
    37                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    38                              <1>     %endif
    39                              <1> 
    40                              <1> %endmacro
    10                                  
    11                                  entry:
    12 00000000 EB58                            jmp     ipl
    13 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    14                                  ipl:
    15 0000005A FA                              cli
    16 0000005B B80000                          mov     ax, 0x0000      ; Accumulate(蓄積) Register = 0x0000
    17 0000005E 8ED8                            mov     ds, ax          ; Data Segment  = 0x0000
    18 00000060 8EC0                            mov     es, ax          ; Extra Segment = 0x0000
    19 00000062 8ED0                            mov     ss, ax          ; Stack Segment = 0x0000
    20 00000064 BC007C                          mov     sp, BOOT_LOAD   ; Stack Point   = 0x7C00
    21                                  
    22 00000067 FB                              sti
    23                                  
    24 00000068 8816[4A01]                      mov     [BOOT.DRIVE], dl
    25                                  
    26 0000006C 68[3001]E8DA0083C4-             cdecl   puts, .s0
    26 00000074 02                 
    27                                  
    28 00000075 6A016A0A6A0868-                 cdecl   itoa, 8086, .s1, 8, 10, 0b0001
    28 0000007C [3E01]68961FE8E700-
    28 00000084 83C40A             
    29 00000087 68[3E01]E8BF0083C4-             cdecl   puts, .s1
    29 0000008F 02                 
    30 00000090 6A036A0A6A0868-                 cdecl   itoa, 8086, .s1, 8, 10, 0b0011
    30 00000097 [3E01]68961FE8CC00-
    30 0000009F 83C40A             
    31 000000A2 68[3E01]E8A40083C4-             cdecl   puts, .s1
    31 000000AA 02                 
    32 000000AB 6A016A0A6A0868-                 cdecl   itoa, -8086, .s1, 8, 10, 0b0001
    32 000000B2 [3E01]686AE0E8B100-
    32 000000BA 83C40A             
    33 000000BD 68[3E01]E8890083C4-             cdecl   puts, .s1
    33 000000C5 02                 
    34 000000C6 6A016A0A6A0868-                 cdecl   itoa, -1, .s1, 8, 10, 0b0001
    34 000000CD [3E01]6AFFE8970083-
    34 000000D5 C40A               
    35 000000D7 68[3E01]E86F0083C4-             cdecl   puts, .s1
    35 000000DF 02                 
    36 000000E0 6A006A0A6A0868-                 cdecl   itoa, -1, .s1, 8, 10, 0b0000
    36 000000E7 [3E01]6AFFE87D0083-
    36 000000EF C40A               
    37 000000F1 68[3E01]E8550083C4-             cdecl   puts, .s1
    37 000000F9 02                 
    38 000000FA 6A006A106A0868-                 cdecl   itoa, -1, .s1, 8, 16, 0b0000
    38 00000101 [3E01]6AFFE8630083-
    38 00000109 C40A               
    39 0000010B 68[3E01]E83B0083C4-             cdecl   puts, .s1
    39 00000113 02                 
    40 00000114 6A046A026A0868-                 cdecl   itoa, 12, .s1, 8, 2, 0b0100
    40 0000011B [3E01]6A0CE8490083-
    40 00000123 C40A               
    41 00000125 68[3E01]E8210083C4-             cdecl   puts, .s1
    41 0000012D 02                 
    42                                  
    43 0000012E EBFE                            jmp     $
    44                                  
    45                                  ;データ定義
    46                                  ; 0x0A(LF.カーソル位置を一行下げる), 0x0D(CR.カーソル位置を左端に移動する)
    47 00000130 426F6F74696E672E2E-     .s0     db      "Booting....", 0x0A, 0x0D, 0
    47 00000139 2E2E0A0D00         
    48 0000013E 2D2D2D2D2D2D2D2D0A-     .s1     db      "--------", 0x0A, 0x0D, 0
    48 00000147 0D00               
    49                                  
    50                                  ; ALIGNディレクティブ。データを2バイト境界で配置するように指示
    51 00000149 00                      ALIGN 2, db 0
    52                                  
    53                                  ; ブートドライブに関する情報
    54                                  BOOT:
    55 0000014A 0000                    .DRIVE:         dw 0    ; ドライブ番号
    56                                  
    57                                  ; モジュール読み込み
    58                                  %include        "../modules/real/puts.s"
     1                              <1> ; ******************************
     2                              <1> ; void puts(str);
     3                              <1> ; -----------------
     4                              <1> ; str: 文字列のアドレス
     5                              <1> ; -----------------
     6                              <1> ; ******************************
     7                              <1> 
     8                              <1> ; // ****************
     9                              <1> ; // レジスタ位置関係
    10                              <1> ; // ****************
    11                              <1> ;   + 4 | str
    12                              <1> ;   + 2 | 戻り番地
    13                              <1> ; BP+ 0 | BP
    14                              <1> 
    15                              <1> puts:
    16                              <1>     ; スタックフレームの構築
    17 0000014C 55                  <1>     push    bp
    18 0000014D 89E5                <1>     mov     bp, sp
    19                              <1> 
    20                              <1>     ; レジスタの保存
    21 0000014F 50                  <1>     push    ax              ;AX: Accumulate Register
    22 00000150 53                  <1>     push    bx              ;BX: Base Register
    23 00000151 56                  <1>     push    si              ;SI: Source Register。ストリーム操作コマンド（たとえば MOV命令）でのソース（入力元）へのポインタとして使用
    24                              <1> 
    25                              <1>     ; 引数取得
    26 00000152 8B7604              <1>     mov     si, [bp + 4]
    27                              <1> 
    28                              <1>     ; 処理開始
    29 00000155 B40E                <1>     mov     ah, 0x0E        ; AH(AXの上位(Hight)8bit)に、テレタイプ式1文字出力を設定
    30 00000157 BB0000              <1>     mov     bx, 0x0000      ; ページ番号と文字色を0に設定
    31 0000015A FC                  <1>     cld                     ; Clear Direction Flag. DF=0で+方向に設定
    32                              <1> .10L:
    33                              <1>     ; LODSB命令: SIレジスタに指定されたアドレスから1バイト分のデータをALレジスタに読み込む。
    34                              <1>     ; そして、SIレジスタの値を1加算(or減算)を行う。今回はDF=0のため加算される)
    35 0000015B AC                  <1>     lodsb
    36                              <1>     
    37                              <1>     ; ALレジスタを比較し0x00(終端文字)の場合は処理終了
    38                              <1>     ; 終端文字ではない場合は、該当文字の文字を出力し、処理を繰り返す
    39 0000015C 3C00                <1>     cmp     al, 0
    40 0000015E 7404                <1>     je      .10E
    41 00000160 CD10                <1>     int     0x10            ; ビデオBIOSコール(INT10)
    42 00000162 EBF7                <1>     jmp     .10L
    43                              <1> .10E:
    44                              <1> 
    45                              <1>     ; レジスタの復帰
    46 00000164 5E                  <1>     pop si
    47 00000165 5B                  <1>     pop bx
    48 00000166 58                  <1>     pop ax
    49                              <1> 
    50                              <1>     ; スタックフレームの破棄
    51 00000167 89EC                <1>     mov sp, bp
    52 00000169 5D                  <1>     pop bp
    53                              <1> 
    54                              <1>     ; 呼び出し元へ戻る
    55 0000016A C3                  <1>     ret
    59                                  %include        "../modules/real/itoa.s"
     1                              <1> ; ******************************
     2                              <1> ; void itos(num, buff, size, radix, flag);
     3                              <1> ; (Int TO Ascii)
     4                              <1> ; -----------------
     5                              <1> ; num   : 変換対象の数値
     6                              <1> ; buff  : 保存先のバッファアドレス
     7                              <1> ; size  : 保存先のバッファサイズ
     8                              <1> ; radix : 基数(2, 8, 10, 16のいずれか)
     9                              <1> ; flag  : ビット定義フラグ
    10                              <1> ;         B2: 空白を'0'で埋める
    11                              <1> ;         B1: '+/-'符号を追加
    12                              <1> ;         B0: 値を符号付変数として扱う
    13                              <1> ; -----------------
    14                              <1> ; ******************************
    15                              <1> 
    16                              <1> ; // ****************
    17                              <1> ; // レジスタ位置関係
    18                              <1> ; // ****************
    19                              <1> ;   + 12 | flag
    20                              <1> ;   + 10 | radix
    21                              <1> ;   + 8  | size
    22                              <1> ;   + 6  | buff
    23                              <1> ;   + 4  | num
    24                              <1> ;   + 2  | 戻り番地
    25                              <1> ; BP+ 0  | BP
    26                              <1> 
    27                              <1> itoa:
    28                              <1>         ; スタックフレームの構築
    29 0000016B 55                  <1>         push    bp
    30 0000016C 89E5                <1>         mov     bp, sp
    31                              <1> 
    32                              <1>         ; レジスタの保存
    33 0000016E 50                  <1>         push    ax
    34 0000016F 53                  <1>         push    bx
    35 00000170 51                  <1>         push    cx
    36 00000171 52                  <1>         push    dx
    37 00000172 56                  <1>         push    si
    38 00000173 57                  <1>         push    di
    39                              <1> 
    40                              <1>         ; 引数取得
    41 00000174 8B4604              <1>         mov     ax, [bp + 4]        ; num:  変換対象の数値
    42 00000177 8B7606              <1>         mov     si, [bp + 6]        ; buff: 変換先のバッファアドレス
    43 0000017A 8B4E08              <1>         mov     cx, [bp + 8]        ; size: バッファサイズ
    44                              <1> 
    45 0000017D 89F7                <1>         mov     di, si              ; バッファの末尾を取得: di = buff[size - 1]
    46 0000017F 01CF                <1>         add     di, cx              ; di = buff + size
    47 00000181 4F                  <1>         dec     di                  ; di = di - 1
    48                              <1>         
    49 00000182 8B5E0C              <1>         mov     bx, word [bp + 12]  ; flag: 変換オプション
    50                              <1> 
    51                              <1> 
    52                              <1>         ; ------------------
    53                              <1>         ; 符号付き判定
    54                              <1>         ; ------------------
    55 00000185 F7C30100            <1>         test    bx, 0b0001  ; test <1>, <2>: 与えられた２つの値の論理積を行い、結果が0であればゼロフラグ(ZF)を立てる
    56 00000189 7408                <1> .10Q:   je      .10E        ; je: ゼロフラグ(ZF)をチェックして、フラグが立っていれば指定ラベルへ移動する
    57 0000018B 83F800              <1>         cmp     ax, 0       ; 対象データ(ax=val)が負の値の場合、符号出力を行うフラグ(bx)をオンにする
    58 0000018E 7D03                <1>         jge     .12E
    59 00000190 83CB02              <1>         or      bx, 0b0010  ;  bx |= 2. OR演算のためB2位置が1となる(0x0000 | 0x0010 = 0x0010)
    60                              <1> .12E:
    61                              <1> .10E:
    62                              <1> 
    63                              <1>         ; ------------------
    64                              <1>         ; 符号出力判定
    65                              <1>         ; ------------------
    66 00000193 F7C30200            <1>         test    bx, 0b0010      ; if(flag == 0x0010) {
    67 00000197 7412                <1> .20Q:   je      .20E            ; 
    68 00000199 83F800              <1>         cmp     ax, 0           ;   if(num < 0) {
    69 0000019C 7D07                <1>         jge     .22F            ;
    70                              <1> 
    71                              <1>         ; 負の値の場合            ;
    72 0000019E F7D8                <1>         neg     ax              ; NEG(2の補数)命令によって、符号を反転: num *= -1
    73 000001A0 C6042D              <1>         mov     [si], byte '-'  ; 変換先のバッファアドレス(si)の先頭に'-'を付与: *buff += '-'
    74 000001A3 EB05                <1>         jmp     .22E            ;
    75                              <1> 
    76                              <1>         ; 正の値の場合
    77 000001A5 C6042B              <1> .22F:   mov     [si], byte '+'  ; 変換先のバッファアドレス(si)の先頭に'+'を付与: *buff += '-'
    78 000001A8 EB00                <1>         jmp     .22E
    79 000001AA 49                  <1> .22E:   dec     cx              ; 符号を付与した分、残りのバッファサイズ(cx=size)を減算
    80                              <1> .20E:
    81                              <1> 
    82                              <1>         ; ------------------
    83                              <1>         ; Ascii変換
    84                              <1>         ; ------------------
    85 000001AB 8B5E0A              <1>         mov     bx, [bp + 10]           ; BX = 基数を取得
    86                              <1> .30L:
    87 000001AE BA0000              <1>         mov     dx, 0                   ; 割り算の余りはdxに代入される。なので、事前に0初期化している。
    88 000001B1 F7F3                <1>         div     bx                      ; 基数(bx)で割り算(div)を行う
    89                              <1> 
    90 000001B3 89D6                <1>         mov     si, dx
    91 000001B5 8A94[DD01]          <1>         mov     dl, byte [.ascii + si]  ; 割り算の余りから、Asciiテーブルを参照
    92                              <1> 
    93 000001B9 8815                <1>         mov     [di], dl                ; di(変換後のバッファアドレスの末尾)にAscii文字を設定
    94 000001BB 4F                  <1>         dec     di                      ; 末尾の１つ前が次のAscii文字設定先であるため、減算(dec)する
    95                              <1> 
    96                              <1>         ; 割り算対象の値は暗黙的にax(変換対象の数値)が使用される
    97                              <1>         ; loopnz命令により、残りのバッファサイズ(cx)か変換対象(az)が0になるまで、ループを繰り返す
    98 000001BC 83F800              <1>         cmp     ax, 0
    99 000001BF E0ED                <1>         loopnz  .30L
   100                              <1> .30E:
   101                              <1> 
   102                              <1>         ; ------------------
   103                              <1>         ; 空欄を埋める
   104                              <1>         ; ------------------
   105 000001C1 83F900              <1>         cmp     cx, 0                   ; バッファサイズ(cx)が残っている場合に、空欄埋めを行う
   106 000001C4 740D                <1> .40Q:   je      .40E
   107 000001C6 B020                <1>         mov     al, ' '
   108 000001C8 837E0C04            <1>         cmp     [bp + 12], word 0b0100
   109 000001CC 7502                <1> .42Q:   jne     .42E
   110 000001CE B030                <1>         mov     al, '0'
   111                              <1> .42E:
   112 000001D0 FD                  <1>         std                             ; DF=0をセット
   113 000001D1 F3AA                <1>         rep stosb                       ; rep命令を置くことで、cxレジスタが0になるまで、後続のstosb命令を繰り返す。その際、stosb命令実行後にcxレジスタの減算を行う。
   114                              <1> .40E:
   115                              <1> 
   116                              <1>     ; レジスタの復帰
   117 000001D3 5F                  <1>     pop di
   118 000001D4 5E                  <1>     pop si
   119 000001D5 5A                  <1>     pop dx
   120 000001D6 59                  <1>     pop cx
   121 000001D7 5B                  <1>     pop bx
   122 000001D8 58                  <1>     pop ax
   123                              <1> 
   124                              <1>     ; スタックフレームの破棄
   125 000001D9 89EC                <1>     mov sp, bp
   126 000001DB 5D                  <1>     pop bp
   127                              <1> 
   128 000001DC C3                  <1>     ret
   129                              <1> 
   130 000001DD 303132333435363738- <1> .ascii  db      "0123456789ABCDEF" ;変換デーブル
   130 000001E6 39414243444546      <1>
    60                                  
    61 000001ED 00<rept>                        times 510 - ($ - $$) db 0x00
    62 000001FE 55AA                            db 0x55, 0xAA
